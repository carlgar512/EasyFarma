import { auth } from "../../presentacion/config/firebaseConfig";
import { Usuario } from "../../negocio/modelos/Usuario";
import { db } from "../../presentacion/config/firebaseConfig";
import { UserRecord } from "firebase-admin/auth";


/**
 * Guarda un usuario en Firestore
 */
export const saveUserToFirestore = async (user: Usuario) => {
  try {
    console.log("üìÑ [DAO] Guardando en Firestore:", user.getIdUsuario());
    const userRef = db.collection("users").doc(user.getIdUsuario());
    await userRef.set(user.toFirestoreObject());
    console.log("‚úÖ [DAO] Guardado exitoso:", user.getIdUsuario());
  } catch (error: any) {
    console.error("‚ùå [DAO] Error guardando en Firestore:", error.message);
    throw error;
  }
};

/**
 * Busca el email de un usuario por su DNI
 */
export const getEmailByDNI = async (dni: string): Promise<string | null> => {
  const cleanDni = String(dni).trim();
  const usersRef = db.collection("users");
  const snapshot = await usersRef.where("dni", "==", cleanDni).get();

  if (!snapshot.empty) {
    const data = snapshot.docs[0].data();
    return data.email;
  }

  return null;
};

/**
 * Busca el email de un usuario por su DNI
 */
export const getUIDByDNI = async (dni: string): Promise<string | null> => {
  const cleanDni = String(dni).trim();
  const usersRef = db.collection("users");
  const snapshot = await usersRef.where("dni", "==", cleanDni).get();

  if (!snapshot.empty) {
    const data = snapshot.docs[0].data();
    return data.uid;
  }

  return null;
};

/**
 * Obtiene un usuario por su UID
 */
export const getUserById = async (uid: string): Promise<JSON | null> => {
  const userRef = db.collection("users").doc(uid);
  const userDoc = await userRef.get();
  return userDoc.exists ? (userDoc.data() as JSON) : null;
};


export const updateUserPassword = async (email: string, password: string): Promise<void> => {
  try {
    // Actualizar la contrase√±a del usuario en Firebase Authentication
    await auth.updateUser(email, {
      password: password, // Cambiar la contrase√±a
    });

    console.log(`‚úÖ Contrase√±a actualizada correctamente para el usuario con email: ${email}`);
  } catch (error: any) {
    console.error(`‚ùå Error al actualizar la contrase√±a para el usuario con email: ${email}:`, error.message);
    throw new Error(`Error al actualizar la contrase√±a para el usuario con email: ${email}`);
  }
}

export const createUserInAuth = async (email: string, password: string): Promise<UserRecord> => {
  try {
    // Crear el usuario en Firebase Authentication
    const userRecord = await auth.createUser({
      email: email,
      password: password,
    });

    console.log(`‚úÖ Usuario creado con √©xito con email: ${email}`);
    return userRecord; // Devuelve el record del usuario creado
  } catch (error: any) {
    console.error(`‚ùå Error al crear el usuario con email: ${email}`, error.message);
    throw new Error(`Error al crear el usuario con email: ${email}`);
  }
};

export const getUserByEmailFromAuth = async (email: string): Promise<UserRecord | null> => {
  try {
    // Obtiene el usuario de Firebase Authentication utilizando el correo
    const userRecord = await auth.getUserByEmail(email);

    console.log(`‚úÖ Usuario encontrado con el correo: ${email}`);
    return userRecord; // Devuelve el objeto del usuario si se encuentra
  } catch (error: any) {
    if (error.code === 'auth/user-not-found') {
      console.error(`‚ùå No se encontr√≥ un usuario con el correo: ${email}`);
    } else {
      console.error(`‚ùå Error al obtener el usuario con el correo: ${email}`, error.message);
    }
    return null; // Si el usuario no se encuentra, retorna null
  }
};

export const updateUserInFirestore = async (uid: string, userData:any) => {
  try {
    const userRef = db.collection("users").doc(uid);
    await userRef.update(userData);
  } catch (error) {
    console.error("‚ùå [DAO User] Error al actualizar en Firestore:", error);
    throw error;
  }
};
